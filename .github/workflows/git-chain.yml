name: Git Chain Management

on:
  pull_request:
    types: [opened, edited, closed]

jobs:
  check-parent-branch:
    if: github.event.action == 'opened' || github.event.action == 'edited'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Fetch Git Notes
        run: |
          # Fetch notes from the remote
          git fetch origin refs/notes/*:refs/notes/*

      - name: Get Parent Branch from JSON Note
        id: get-parent
        run: |
          # Get the first commit
          first_commit=$(git rev-list --max-parents=0 HEAD)

          # Fetch the JSON note from the first commit
          json=$(git notes show "$first_commit" 2>/dev/null || echo "{}")

          # Extract parent for the current branch
          parent=$(echo "$json" | jq -c -r --arg child "${{ github.event.pull_request.head.ref }}" '
            to_entries[] | select(.value[] == $child) | .key
          ')

          echo "parent=$parent" >> $GITHUB_ENV

      - name: Compare Base Branch with Parent
        run: |
          if [ -n "${{ env.parent }}" ] && [ "${{ github.event.pull_request.base.ref }}" != "${{ env.parent }}" ]; then
            echo "::warning::The base branch (${{ github.event.pull_request.base.ref }}) is different from the parent branch (${{ env.parent }})."
          fi

  rebase-child-prs:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Fetch Git Notes
        run: |
          # Fetch notes from the remote
          git fetch origin refs/notes/*:refs/notes/*

      - name: List Open Pull Requests
        id: list-prs
        run: |
          # Fetch all open pull requests
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls > prs.json

      - name: Rebase Child PRs
        run: |
          merged_branch="${{ github.event.pull_request.head.ref }}"
          destination_branch="${{ github.event.pull_request.base.ref }}"
          first_commit=$(git rev-list --max-parents=0 HEAD)

          # Fetch the JSON note from the first commit
          json=$(git notes show "$first_commit" 2>/dev/null || echo "{}")

          # Iterate through all open PRs
          jq -c '.[]' prs.json | while read pr; do
            pr_base=$(echo "$pr" | jq -c -r '.base.ref')
            pr_number=$(echo "$pr" | jq -c -r '.number')

            # Check if the PR's base branch matches the merged branch
            if [ "$pr_base" == "$merged_branch" ]; then
              echo "Rebasing PR #$pr_number to $destination_branch"
              curl -X PATCH -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github+json" \
                -d "{\"base\":\"$destination_branch\"}" \
                https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number
            fi
          done

  update-notes:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Fetch Git Notes
        run: |
          # Fetch notes from the remote
          git fetch origin refs/notes/*:refs/notes/*

      - name: Update Parent-Child Relationships in JSON Note
        run: |
          merged_branch="${{ github.event.pull_request.head.ref }}"
          destination_branch="${{ github.event.pull_request.base.ref }}"
          first_commit=$(git rev-list --max-parents=0 HEAD)

          # Fetch the JSON note from the first commit
          json=$(git notes show "$first_commit" 2>/dev/null || echo "{}")

          # Update the JSON tree
          updated_json=$(echo "$json" | jq -c --arg merged_branch "$merged_branch" --arg destination_branch "$destination_branch" '
            to_entries | map(
              if .key == $merged_branch then
                .key = $destination_branch
              elif .value | index($merged_branch) then
                .value |= map(if . == $merged_branch then $destination_branch else . end)
              else . end
            ) | from_entries
          ')

          # Save the updated JSON back to the note
          echo "$updated_json" | git notes add -f -F - "$first_commit"

      - name: Push Updated Notes
        run: |
          # Push updated notes back to the remote
          git push origin refs/notes/*:refs/notes/*
